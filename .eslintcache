[{"D:\\Github_Gitlab\\cronometro\\src\\App.js":"1","D:\\Github_Gitlab\\cronometro\\src\\pages\\Cronometer\\index.js":"2","D:\\Github_Gitlab\\cronometro\\src\\components\\Counter\\index.jsx":"3"},{"size":147,"mtime":1608494804132,"results":"4","hashOfConfig":"5"},{"size":2668,"mtime":1608500563803,"results":"6","hashOfConfig":"5"},{"size":574,"mtime":1608500936166,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x61do6",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Github_Gitlab\\cronometro\\src\\App.js",[],"D:\\Github_Gitlab\\cronometro\\src\\pages\\Cronometer\\index.js",["15","16"],"import { useState } from \"react\";\r\nimport \"./style.css\";\r\nimport Counter from \"../../components/Counter/index\";\r\n\r\nconst cronometerModel = {\r\n  hour: 0,\r\n  minutes: 0,\r\n  seconds: 0,\r\n  miliseconds: 0,\r\n};\r\n\r\nconst Cronometer = () => {\r\n  const [clock, setClock] = useState(cronometerModel);\r\n  const [start, setStart] = useState(false);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [stopedTimer, setStopedTimer] = useState([]);\r\n  // Estado para controlar o set Interval\r\n  const [interval, setInter] = useState(null);\r\n  //?Principal diferença entre o setInterval e o setTimeout\r\n  //! setInterval executa repetidamente a função passada em seu primeiro parametro depois da quantidade de tempo passada\r\n  //! setTimeOut executa apenas uma vez a função passada em seu primeiro parametro depois da quantidade de tempo passada\r\n\r\n  function init() {\r\n    setStart(true);\r\n\r\n    setInter(\r\n      setInterval(() => {\r\n        setClock((clockData) => {\r\n          let hour = clockData.hour;\r\n          let minutes = clockData.minutes;\r\n          let seconds = clockData.seconds;\r\n          let miliseconds = clockData.miliseconds;\r\n\r\n          if (miliseconds === 1000) {\r\n            miliseconds = 0;\r\n            seconds++;\r\n          }\r\n\r\n          if (seconds === 60) {\r\n            miliseconds = 0;\r\n            seconds = 0;\r\n            minutes++;\r\n          }\r\n\r\n          if (minutes === 60) {\r\n            hour++;\r\n            minutes = 0;\r\n            seconds = 0;\r\n            miliseconds = 0;\r\n          }\r\n\r\n          return { hour, minutes, seconds, miliseconds: miliseconds + 1 };\r\n        });\r\n      }, 0)\r\n    );\r\n  }\r\n\r\n  function pause() {\r\n    setStart(false);\r\n    console.log(interval);\r\n    //! Limpa o intervalo, ou seja faz parar de repetir.\r\n    clearInterval(interval);\r\n  }\r\n\r\n  function stop() {\r\n    const stopedTimerCopy = stopedTimer.slice(\"\");\r\n    stopedTimerCopy.push(clock);\r\n\r\n    clearInterval(interval);\r\n    setStart(false);\r\n    setClock(cronometerModel);\r\n    setStopedTimer(stopedTimerCopy);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Counter\r\n        hour={clock.hour}\r\n        minutes={clock.minutes}\r\n        seconds={clock.seconds}\r\n        miliseconds={clock.miliseconds}\r\n      />\r\n\r\n      {start ? (\r\n        <button onClick={pause}>Pause</button>\r\n      ) : (\r\n        <button onClick={init}>Start</button>\r\n      )}\r\n\r\n      <button onClick={stop}>Stop</button>\r\n\r\n      {stopedTimer.map((item, index) => (\r\n        <p\r\n          key={index}\r\n        >{`${item.hour}:${item.minutes}:${item.seconds}:${item.miliseconds}`}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cronometer;\r\n","D:\\Github_Gitlab\\cronometro\\src\\components\\Counter\\index.jsx",[],{"ruleId":"17","severity":1,"message":"18","line":15,"column":10,"nodeType":"19","messageId":"20","endLine":15,"endColumn":17},{"ruleId":"17","severity":1,"message":"21","line":15,"column":19,"nodeType":"19","messageId":"20","endLine":15,"endColumn":29},"no-unused-vars","'seconds' is assigned a value but never used.","Identifier","unusedVar","'setSeconds' is assigned a value but never used."]